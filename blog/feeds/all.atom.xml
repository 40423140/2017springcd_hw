<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>40423140上課報告</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2017-06-08T00:00:00+08:00</updated><entry><title>20170608W16</title><link href="./40423140w16.html" rel="alternate"></link><updated>2017-06-08T00:00:00+08:00</updated><author><name>40423140</name></author><id>tag:,2017-06-08:./40423140w16.html</id><summary type="html">&lt;p&gt;四足行走機構&lt;/p&gt;


&lt;h1&gt;等角投影圖&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://imgur.com/yf1SlRo"&gt;&lt;img src="http://i.imgur.com/yf1SlRo.jpg" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;組合圖&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://imgur.com/exkv6Yz"&gt;&lt;img src="http://i.imgur.com/exkv6Yz.jpg" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;立體系統圖&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://imgur.com/eHz8Ysw"&gt;&lt;img src="http://i.imgur.com/eHz8Ysw.jpg" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;工作圖01&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://imgur.com/B6XP5UU"&gt;&lt;img src="http://i.imgur.com/B6XP5UU.jpg" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;工作圖02&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://imgur.com/ErO1eGh"&gt;&lt;img src="http://i.imgur.com/ErO1eGh.jpg" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;工作圖03&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://imgur.com/DMvACoh"&gt;&lt;img src="http://i.imgur.com/DMvACoh.jpg" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;成品照&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://imgur.com/c8fMO3F"&gt;&lt;img src="http://i.imgur.com/c8fMO3F.jpg" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="w16"></category></entry><entry><title>20170601W15</title><link href="./40423140w15.html" rel="alternate"></link><updated>2017-06-01T00:00:00+08:00</updated><author><name>40423140</name></author><id>tag:,2017-06-01:./40423140w15.html</id><summary type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 0.8*(canvas.height/2)
# 齒數
n = 36
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")

ctx.beginPath()
ctx.lineWidth = "600"
ctx.strokeStyle = "white"
ctx.moveTo(0,600)
ctx.lineTo(800,600)
ctx.stroke()

ctx.beginPath()
ctx.fillStyle = "   #32CD32"
ctx.font = "30px DFKai-sb"
ctx.fillText("40423140 ",340,300)
ctx.stroke()

&lt;/script&gt;

&lt;h1&gt;2.&lt;/h1&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear2" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear2_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=17, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear2']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2+2400
r = 8*(canvas.height/2)
# 齒數
n = 20
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "purple")



ctx.beginPath()
#色碼=綠色
ctx.fillStyle = "#32CD32"
ctx.font = "30px DFKai-sb"
#輸入學號
ctx.fillText("40423140 ",340,320)
ctx.stroke()
&lt;/script&gt;

&lt;h1&gt;3.&lt;/h1&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id='gear3' width='1000' height='600'&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
# 導入 browser 模組中的 document, 並設為 doc 變數
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)

                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)

# 準備在 id="gear3" 的 canvas 中繪圖
canvas = doc["gear3"]
ctx = canvas.getContext("2d")

# 模數決定齒的尺寸大小, 囓合齒輪組必須有相同的模數與壓力角
# 壓力角 pa 單位為角度
pa = 20
# 第1齒輪齒數
n_g1 = 16
# 第2齒輪齒數
n_g2 = 18
# 第3齒輪齒數
n_g3 = 20
# 第4齒輪齒數
n_g4 = 22
# 第5齒輪齒數
n_g5 = 24
# 第6齒輪齒數
n_g6 = 26
# 第7齒輪齒數
n_g7 = 28
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
m = (0.6*canvas.width)/(n_g1+n_g2+n_g3+n_g4+n_g5)
# 根據模數 m, 計算各齒輪的節圓半徑
rp_g1 = m*n_g1/2
rp_g2 = m*n_g2/2
rp_g3 = m*n_g3/2
rp_g4 = m*n_g4/2
rp_g5 = m*n_g5/2
rp_g6 = m*n_g6/2
rp_g7 = m*n_g7/2
#單一正齒輪繪圖呼叫格式 Spur(ctx).Gear(x, y, r, n, pa, "blue")
# 開始繪製囓合齒輪輪廓
# 繪圖第1齒輪的圓心座標, 因為希望繪圖佔去 canvas.width 的 80%, 所以兩邊各預留 10% 距離
x_g1 = canvas.width*0.05+rp_g1
# y 方向繪圖區域上方預留 canvas.height 的 20%
y_g1 = canvas.height*0.1+rp_g1
# 第2齒輪的圓心座標, 假設排列成水平, 表示各齒輪圓心 y 座標相同
x_g2 = x_g1 + rp_g1 + rp_g2
y_g2 = y_g1
# 第3齒輪的圓心座標
x_g3 = x_g1 + rp_g1 + 2*rp_g2 + rp_g3
y_g3 = y_g1

# 第4齒輪的圓心座標
x_g4 = x_g1 + rp_g1 + 2*rp_g2 + 2*rp_g3+rp_g4
y_g4 = y_g1

# 第5齒輪的圓心座標
x_g5 = x_g1 + rp_g1 + 2*rp_g2 + 2*rp_g3+rp_g4
y_g5 = y_g4+rp_g4+rp_g5

# 第6齒輪的圓心座標
x_g6 = x_g1 + rp_g1 + 2*rp_g2 + 2*rp_g3+rp_g4
y_g6 = y_g4+rp_g4+2*rp_g5+rp_g6

# 第7齒輪的圓心座標
x_g7 = x_g1 + rp_g1 + 2*rp_g2 + 2*rp_g3+rp_g4-rp_g6-rp_g7
y_g7 = y_g4 +rp_g4+2*rp_g5+rp_g6
# 將第1齒輪順時鐘轉 90 度, 也就是 math.pi/2
# 使用 ctx.save() 與 ctx.restore() 以確保各齒輪以相對座標進行旋轉繪圖
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g1, y_g1)
# rotate to engage
ctx.rotate(math.pi/2)
# put it back
ctx.translate(-x_g1, -y_g1)
# 繪製第一個齒輪輪廓
Spur(ctx).Gear(x_g1, y_g1, rp_g1, n_g1, pa, "black")
ctx.restore()

# 將第2齒輪逆時鐘轉 90 度之後, 再多轉一齒, 以便與第1齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g2, y_g2)
# rotate to engage
ctx.rotate(-math.pi/2-math.pi/n_g2)
# put it back
ctx.translate(-x_g2, -y_g2)
Spur(ctx).Gear(x_g2, y_g2, rp_g2, n_g2, pa, "green")
ctx.restore()

# 將第3齒輪逆時鐘轉 90 度之後, 再往回轉第2齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g3, y_g3)
# rotate to engage
# math.pi+math.pi/n_g2 為第2齒輪從順時鐘轉 90 度之後, 必須配合目前的標記線所作的齒輪 2 轉動角度, 要轉換到齒輪3 的轉動角度
# 必須乘上兩齒輪齒數的比例, 若齒輪2 大, 則齒輪3 會轉動較快
# 第1個 -math.pi/2 為將原先垂直的第3齒輪定位線逆時鐘旋轉 90 度
# -math.pi/n_g3 則是第3齒與第2齒定位線重合後, 必須再逆時鐘多轉一齒的轉角, 以便進行囓合
# (math.pi+math.pi/n_g2)*n_g2/n_g3 則是第2齒原定位線為順時鐘轉動 90 度, 
# 但是第2齒輪為了與第1齒輪囓合, 已經距離定位線, 多轉了 180 度, 再加上第2齒輪的一齒角度, 因為要帶動第3齒輪定位, 
# 這個修正角度必須要再配合第2齒與第3齒的轉速比加以轉換成第3齒輪的轉角, 因此乘上 n_g2/n_g3
ctx.rotate(-math.pi/2-math.pi/n_g3+(math.pi+math.pi/n_g2)*n_g2/n_g3)
# put it back
ctx.translate(-x_g3, -y_g3)
Spur(ctx).Gear(x_g3, y_g3, rp_g3, n_g3, pa, "black")
ctx.restore()

# 將第4齒輪逆時鐘轉 90 度之後, 再往回轉第3齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g4, y_g4)
# rotate to engage
ctx.rotate(math.pi/2-math.pi/n_g4+(math.pi+math.pi/n_g3)*n_g3/n_g4*2)
# put it back
ctx.translate(-x_g4, -y_g4)
Spur(ctx).Gear(x_g4, y_g4, rp_g4, n_g4, pa, "red")
ctx.restore()


# 將第5齒輪逆時鐘轉 90 度之後, 再往回轉第3齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g5, y_g5)
# rotate to engage
ctx.rotate(math.pi/2-math.pi/n_g5+(math.pi+math.pi/n_g4)*n_g4/n_g5*2)
# put it back
ctx.translate(-x_g5, -y_g5)
Spur(ctx).Gear(x_g5, y_g5, rp_g5, n_g5, pa, "red")
ctx.restore()


# 將第6齒輪逆時鐘轉 90 度之後, 再往回轉第3齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g6, y_g6)
# rotate to engage
ctx.rotate(-math.pi/2-math.pi/n_g6+(math.pi+math.pi/n_g5)*n_g5/n_g6*2)
# put it back
ctx.translate(-x_g6, -y_g6)
Spur(ctx).Gear(x_g6, y_g6, rp_g6, n_g6, pa, "purple")
ctx.restore()


# 將第7齒輪逆時鐘轉 90 度之後, 再往回轉第3齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g7, y_g7)
# rotate to engage
ctx.rotate(-math.pi/2-math.pi/n_g7+(math.pi+math.pi/n_g6)*n_g6/n_g7)
# put it back
ctx.translate(-x_g7, -y_g7)
Spur(ctx).Gear(x_g7, y_g7, rp_g7, n_g7, pa, "black")
ctx.restore()
&lt;/script&gt;</summary><category term="w15"></category></entry><entry><title>20170511W12</title><link href="./40423140w12.html" rel="alternate"></link><updated>2017-05-11T00:00:00+08:00</updated><author><name>40423140</name></author><id>tag:,2017-05-11:./40423140w12.html</id><summary type="html">&lt;p&gt;利用漸開線原理, 以 Brython 繪製單一正齒輪廓&lt;/p&gt;


&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 0.8*(canvas.height/2)
# 齒數
n = 53
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")
&lt;/script&gt;

&lt;!-- 以下處理 Cango Spur Gear --&gt;

&lt;!-- Cango 程式庫 --&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/Cango-8v03.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/Cango2D-7v01-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/CangoAxes-1v33.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/CangoAnimation-4v01.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/gearUtils-05.js"&gt;&lt;/script&gt;

&lt;canvas id='cango_gear' width='800' height='750'&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
# 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容
from browser import document as doc
# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換
from browser import window
import math

# 主要用來取得畫布大小
canvas = doc["cango_gear"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
#ctx = canvas.getContext("2d")
cango = window.Cango.new
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形
# in CangoAnimation.js
#interpolate1 = window.interpolate
# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件
cobj = window.Cobj.new
creategeartooth = window.createGearTooth.new
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")

######################################
# 畫正齒輪輪廓
#####################################
# n 為齒數
n = 17
# pa 為壓力角
pa = 25
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
# Module = mm of pitch diameter per tooth
m = 0.8*canvas.width/n
# pr 為節圓半徑
pr = n*m/2 # gear Pitch radius
# generate gear
data = creategeartooth(m, n, pa)
# Brython 程式中的 print 會將資料印在 Browser 的 console 區
#print(data)
gearTooth = cobj(data, "SHAPE", {
        "fillColor":"#ddd0dd",
        "border": True,
        "strokeColor": "#606060" })
gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh
# 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
gear = gearTooth.dup()
# gear 為單一齒的輪廓資料
#cgo.render(gearTooth)

# 利用單齒輪廓旋轉, 產生整個正齒輪外形
for i in range(1, n):
    # 將 gearTooth 中的資料複製到 newTooth
    newTooth = gearTooth.dup()
    # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
    newTooth.rotate(360*i/n)
    # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號
    gear.appendPath(newTooth, True) # trim move command = True

# 建立軸孔
# add axle hole, hr 為 hole radius
hr = 0.6*pr # diameter of gear shaft
shaft = cobj(shapedefs.circle(hr), "PATH")
shaft.revWinding()
gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path
cx = canvas.width/2
cy = canvas.height/2
gear.translate(cx, cy)
# render 繪出靜態正齒輪輪廓
cgo.render(gear)
&lt;/script&gt;

&lt;p&gt;設法處理兩種正齒輪嚙合的協同繪圖 (13t-11t-17t):&lt;/p&gt;
&lt;canvas id='gear3' width='800' height='400'&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
# 導入 browser 模組中的 document, 並設為 doc 變數
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)

                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)

# 準備在 id="gear3" 的 canvas 中繪圖
canvas = doc["gear3"]
ctx = canvas.getContext("2d")

# 模數決定齒的尺寸大小, 囓合齒輪組必須有相同的模數與壓力角
# 壓力角 pa 單位為角度
pa = 20
# 第1齒輪齒數
n_g1 = 13
# 第2齒輪齒數
n_g2 = 11
# 第3齒輪齒數
n_g3 = 17
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
m = (0.8*canvas.width)/(n_g1+n_g2+n_g3)
# 根據模數 m, 計算各齒輪的節圓半徑
rp_g1 = m*n_g1/2
rp_g2 = m*n_g2/2
rp_g3 = m*n_g3/2
#單一正齒輪繪圖呼叫格式 Spur(ctx).Gear(x, y, r, n, pa, "blue")
# 開始繪製囓合齒輪輪廓
# 繪圖第1齒輪的圓心座標, 因為希望繪圖佔去 canvas.width 的 80%, 所以兩邊各預留 10% 距離
x_g1 = canvas.width*0.1+rp_g1
# y 方向繪圖區域上方預留 canvas.height 的 20%
y_g1 = canvas.height*0.2+rp_g1
# 第2齒輪的圓心座標, 假設排列成水平, 表示各齒輪圓心 y 座標相同
x_g2 = x_g1 + rp_g1 + rp_g2
y_g2 = y_g1
# 第3齒輪的圓心座標
x_g3 = x_g1 + rp_g1 + 2*rp_g2 + rp_g3
y_g3 = y_g1

# 將第1齒輪順時鐘轉 90 度, 也就是 math.pi/2
# 使用 ctx.save() 與 ctx.restore() 以確保各齒輪以相對座標進行旋轉繪圖
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g1, y_g1)
# rotate to engage
ctx.rotate(math.pi/2)
# put it back
ctx.translate(-x_g1, -y_g1)
# 繪製第一個齒輪輪廓
Spur(ctx).Gear(x_g1, y_g1, rp_g1, n_g1, pa, "blue")
ctx.restore()

# 將第2齒輪逆時鐘轉 90 度之後, 再多轉一齒, 以便與第1齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g2, y_g2)
# rotate to engage
ctx.rotate(-math.pi/2-math.pi/n_g2)
# put it back
ctx.translate(-x_g2, -y_g2)
Spur(ctx).Gear(x_g2, y_g2, rp_g2, n_g2, pa, "black")
ctx.restore()

# 將第3齒輪逆時鐘轉 90 度之後, 再往回轉第2齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g3, y_g3)
# rotate to engage
# math.pi+math.pi/n_g2 為第2齒輪從順時鐘轉 90 度之後, 必須配合目前的標記線所作的齒輪 2 轉動角度, 要轉換到齒輪3 的轉動角度
# 必須乘上兩齒輪齒數的比例, 若齒輪2 大, 則齒輪3 會轉動較快
# 第1個 -math.pi/2 為將原先垂直的第3齒輪定位線逆時鐘旋轉 90 度
# -math.pi/n_g3 則是第3齒與第2齒定位線重合後, 必須再逆時鐘多轉一齒的轉角, 以便進行囓合
# (math.pi+math.pi/n_g2)*n_g2/n_g3 則是第2齒原定位線為順時鐘轉動 90 度, 
# 但是第2齒輪為了與第1齒輪囓合, 已經距離定位線, 多轉了 180 度, 再加上第2齒輪的一齒角度, 因為要帶動第3齒輪定位, 
# 這個修正角度必須要再配合第2齒與第3齒的轉速比加以轉換成第3齒輪的轉角, 因此乘上 n_g2/n_g3
ctx.rotate(-math.pi/2-math.pi/n_g3+(math.pi+math.pi/n_g2)*n_g2/n_g3)
# put it back
ctx.translate(-x_g3, -y_g3)
Spur(ctx).Gear(x_g3, y_g3, rp_g3, n_g3, pa, "red")
ctx.restore()
&lt;/script&gt;</summary><category term="w12"></category></entry><entry><title>20170506W11</title><link href="./40423140w11-1.html" rel="alternate"></link><updated>2017-05-06T00:00:00+08:00</updated><author><name>40423140</name></author><id>tag:,2017-05-06:./40423140w11-1.html</id><summary type="html">&lt;h2&gt;協同 2D 正齒輪傳動繪圖 (二)11齒&lt;/h2&gt;


&lt;p&gt;&lt;a href="https://40423140.github.io/2016fallcadp_hw/blog/20170506di-shi-yi-zhou.html"&gt;齒輪嚙合傳動13齒&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://40423140.github.io/2016fallcadp_hw/blog/20170507di-shi-yi-zhou.html"&gt;齒輪嚙合傳動17齒&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;利用漸開線原理, 以 Brython 繪製單一正齒輪廓:&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 0.8*(canvas.height/2)
# 齒數
n = 11
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")
&lt;/script&gt;

&lt;!-- 以下處理 Cango Spur Gear --&gt;

&lt;!-- Cango 程式庫 --&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/Cango-9v05-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/CangoAxes-2v09.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/CangoAnimation-5v00.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/gearUtils-05.js"&gt;&lt;/script&gt;

&lt;canvas id='cango_gear' width='800' height='750'&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
# 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容
from browser import document as doc
# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換
from browser import window
import math

# 主要用來取得畫布大小
canvas = doc["cango_gear"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
ctx = canvas.getContext("2d")
cango = window.Cango.new
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形
# in CangoAnimation.js
#interpolate1 = window.interpolate
# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件
#cobj = window.Cobj.new
shape = window.Shape.new
path = window.Path.new
creategeartooth = window.createGearTooth.new

tweener = window.Tweener.new
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")

######################################
# 畫正齒輪輪廓
#####################################
# n 為齒數
n = 13
# pa 為壓力角
pa = 25
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
# Module = mm of pitch diameter per tooth
m = 0.8*canvas.width/n
# pr 為節圓半徑
pr = n*m/2 # gear Pitch radius
# generate gear
data = creategeartooth(m, n, pa)
# Brython 程式中的 print 會將資料印在 Browser 的 console 區
#print(data)
gearTooth = shape(data, {
  "fillColor":"#ddd0dd",
  "border": True,
  "strokeColor": "#606060" })
gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh
# 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
gear = gearTooth.dup()
# gear 為單一齒的輪廓資料
#cgo.render(gearTooth)

# 利用單齒輪廓旋轉, 產生整個正齒輪外形
for i in range(1, n):
    # 將 gearTooth 中的資料複製到 newTooth
    newTooth = gearTooth.dup()
    # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
    newTooth.rotate(360*i/n)
    # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號
    gear.appendPath(newTooth, True) # trim move command = True

# 建立軸孔
# add axle hole, hr 為 hole radius
hr = 0.6*pr # diameter of gear shaft
shaft = path(shapedefs.circle(hr))
shaft.revWinding()
gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path

# setup the animation
# backlash (mm)
bklsh = 0.04*m
# centre shift to make backlash
dC = bklsh/(2*math.tan(math.pi*pa/180))
# np 為小齒輪齒數
np = 11
# gear ratio
gr = n/np              
gearConfig = {'cx':-pr, 'cy':0, 'degs':[0, 360]}
# gr*0.666 rpm
#pinionConfig = {'cx':pr+dC, 'cy':0, 'degs':[0, -gr*360]}
# 0.666 rpm
twnr = tweener(0, 90000, "loop")

cx = canvas.width/2
cy = canvas.height/2
#gear.translate(cx, cy)
# render 繪出靜態正齒輪輪廓
#cgo.render(gear)
# 利用 gear 資料複製一份, 命名為 gear1
gear1 = gear.dup()

from time import time
from browser.timer import request_animation_frame as raf
from browser.timer import set_interval

deg = math.pi/180

def draw():
    cgo.clearCanvas()
    gear.rotate(2*deg)
    # 在特定位置, 以特定 scale, 特定 degs 執行 render
    cgo.render(gear, {'x':cx-pr/2, 'y':cy, 'scl':0.5, 'degs':0})
    gear1.rotate(-2*deg)
    cgo.render(gear1, {'x':cx+pr*2*0.5-pr/2, 'y':cy, 'scl':0.5, 'degs':0})

set_interval(draw, 2)
&lt;/script&gt;</summary><category term="w11"></category></entry><entry><title>2017050W11</title><link href="./40423140w11.html" rel="alternate"></link><updated>2017-05-04T00:00:00+08:00</updated><author><name>40423140</name></author><id>tag:,2017-05-04:./40423140w11.html</id><summary type="html">&lt;h2&gt;協同 2D 正齒輪傳動繪圖&lt;/h2&gt;


&lt;p&gt;&lt;a href="https://40423140.github.io/2016fallcadp_hw/blog/20170504di-shi-yi-zhou.html"&gt;正齒輪傳動13齒&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://40423140.github.io/2016fallcadp_hw/blog/20170505di-shi-yi-zhou.html"&gt;正齒輪傳動17
齒&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;利用漸開線原理, 以 Brython 繪製單一正齒輪廓:&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 0.8*(canvas.height/2)
# 齒數
n = 11
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")

&lt;/script&gt;

&lt;!-- 以下處理 Cango Spur Gear --&gt;

&lt;!-- Cango 程式庫 --&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/Cango-8v03.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/Cango2D-7v01-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/CangoAxes-1v33.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/CangoAnimation-4v01.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/gearUtils-05.js"&gt;&lt;/script&gt;

&lt;canvas id='cango_gear' width='800' height='750'&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
# 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容
from browser import document as doc
# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換
from browser import window
import math

# 主要用來取得畫布大小
canvas = doc["cango_gear"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
#ctx = canvas.getContext("2d")
cango = window.Cango.new
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形
# in CangoAnimation.js
#interpolate1 = window.interpolate
# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件
cobj = window.Cobj.new
creategeartooth = window.createGearTooth.new
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")

######################################
# 畫正齒輪輪廓
#####################################
# n 為齒數
n = 11
# pa 為壓力角
pa = 25
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
# Module = mm of pitch diameter per tooth
m = 0.8*canvas.width/n
# pr 為節圓半徑
pr = n*m/2 # gear Pitch radius
# generate gear
data = creategeartooth(m, n, pa)
# Brython 程式中的 print 會將資料印在 Browser 的 console 區
#print(data)
gearTooth = cobj(data, "SHAPE", {
        "fillColor":"#ddd0dd",
        "border": True,
        "strokeColor": "#606060" })
gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh
# 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
gear = gearTooth.dup()
# gear 為單一齒的輪廓資料
#cgo.render(gearTooth)

# 利用單齒輪廓旋轉, 產生整個正齒輪外形
for i in range(1, n):
    # 將 gearTooth 中的資料複製到 newTooth
    newTooth = gearTooth.dup()
    # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
    newTooth.rotate(360*i/n)
    # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號
    gear.appendPath(newTooth, True) # trim move command = True

# 建立軸孔
# add axle hole, hr 為 hole radius
hr = 0.6*pr # diameter of gear shaft
shaft = cobj(shapedefs.circle(hr), "PATH")
shaft.revWinding()
gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path
cx = canvas.width/2
cy = canvas.height/2
gear.translate(cx, cy)
# render 繪出靜態正齒輪輪廓
cgo.render(gear)
&lt;/script&gt;</summary><category term="w11"></category></entry><entry><title>20170429W10</title><link href="./40423140w10-1.html" rel="alternate"></link><updated>2017-04-29T00:00:00+08:00</updated><author><name>40423140</name></author><id>tag:,2017-04-29:./40423140w10-1.html</id><summary type="html">&lt;h2&gt;add加減乘除&lt;/h2&gt;


&lt;p&gt;Brython測試&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫四連桿 trace point 路徑--&gt;

&lt;!--&lt;canvas id="w10" width="800" height="600"&gt;&lt;/canvas&gt;--&gt;

&lt;div id="container" width="600" height="400"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import math
container = doc['container']
degree = math.pi/180
def button1(event):
    a = input("give me a")
    container &lt;= str(math.cos(60*degree)+float(a))
doc["button1"].bind("click", button1)
&lt;/script&gt;

&lt;p&gt;&lt;button id="button1"&gt;按下取 a 值&lt;/button&gt;&lt;/p&gt;</summary><category term="w10"></category></entry><entry><title>20170421W10</title><link href="./40423140w10.html" rel="alternate"></link><updated>2017-04-21T00:00:00+08:00</updated><author><name>40423140</name></author><id>tag:,2017-04-21:./40423140w10.html</id><summary type="html">&lt;h2&gt;add加減乘除&lt;/h2&gt;


&lt;div style="position:relative;height:0;padding-bottom:56.25%"&gt;&lt;iframe src="https://www.youtube.com/embed/AKmBik0vKAs?ecver=2" width="640" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;div style="position:relative;height:0;padding-bottom:56.25%"&gt;&lt;iframe src="https://www.youtube.com/embed/Ey-5n0928ZM?ecver=2" width="640" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;div style="position:relative;height:0;padding-bottom:56.25%"&gt;&lt;iframe src="https://www.youtube.com/embed/hnA-2CIm0dI?ecver=2" width="640" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;h1&gt;網頁測試加法&lt;/h1&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫四連桿 trace point 路徑--&gt;

&lt;!--&lt;canvas id="w10" width="800" height="600"&gt;&lt;/canvas&gt;--&gt;

&lt;div id="container" width="600" height="400"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import math
container = doc['container']
degree = math.pi/180
def button1(event):
    a = input("give me a")
    b = input("give me b")
    container &lt;= str(float(a)+float(b))
doc["button1"].bind("click", button1)

&lt;/script&gt;

&lt;p&gt;&lt;button id="button1"&gt;按下取 a b 值&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;add.py(加法)
&lt;pre class="brush:python"&gt;
 定義: add這個檔為a和b兩個變數&lt;/p&gt;
&lt;p&gt;輸出公式為 a+b&lt;/p&gt;
&lt;p&gt;導入sys&lt;/p&gt;
&lt;p&gt;指出資料夾路徑&lt;/p&gt;
&lt;p&gt;輸出add.pty這個檔&lt;/p&gt;
&lt;p&gt;把輸出之名命名為sum=add.add(1,2)    &lt;/p&gt;
&lt;p&gt;第一個為add.py檔名,第二個為add名稱&lt;/p&gt;
&lt;p&gt;輸出之公式ab為1和2
 &lt;/pre&gt;&lt;/p&gt;
&lt;h1&gt;網頁測試乘法&lt;/h1&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫四連桿 trace point 路徑--&gt;

&lt;!--&lt;canvas id="w10" width="800" height="600"&gt;&lt;/canvas&gt;--&gt;

&lt;div id="container3" width="600" height="400"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import math
container = doc['container3']
degree = math.pi/180
def button3(event):
    a = input("give me a")
    b = input("give me b")
    container &lt;= str(float(a)*float(b))
doc["button3"].bind("click", button3)

&lt;/script&gt;

&lt;p&gt;&lt;button id="button3"&gt;按下取 a b 值&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;mul.py(乘法)
&lt;pre class="brush:python"&gt;
 定義: mul這個檔為a和b兩個變數&lt;/p&gt;
&lt;p&gt;輸出公式為 a*b&lt;/p&gt;
&lt;p&gt;導入sys&lt;/p&gt;
&lt;p&gt;指出資料夾路徑&lt;/p&gt;
&lt;p&gt;輸出mul.pty這個檔&lt;/p&gt;
&lt;p&gt;把輸出之名命名為multip=add.add(1,2)    &lt;/p&gt;
&lt;p&gt;第一個為mul.py檔名,第二個為mul名稱&lt;/p&gt;
&lt;p&gt;輸出之公式ab為1和2
 &lt;/pre&gt;&lt;/p&gt;
&lt;h1&gt;網頁測試除法&lt;/h1&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫四連桿 trace point 路徑--&gt;

&lt;!--&lt;canvas id="w10" width="800" height="600"&gt;&lt;/canvas&gt;--&gt;

&lt;div id="container4" width="600" height="400"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import math
container = doc['container4']
degree = math.pi/180
def button4(event):
    a = input("give me a")
    b = input("give me b")
    container &lt;= str(float(a)/float(b))
doc["button4"].bind("click", button4)

&lt;/script&gt;

&lt;p&gt;&lt;button id="button4"&gt;按下取 a b 值&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;division.py(除法)
&lt;pre class="brush:python"&gt;
 定義: div這個檔為a和b兩個變數&lt;/p&gt;
&lt;p&gt;輸出公式為 a/b&lt;/p&gt;
&lt;p&gt;導入sys&lt;/p&gt;
&lt;p&gt;指出資料夾路徑&lt;/p&gt;
&lt;p&gt;輸出mul.pty這個檔&lt;/p&gt;
&lt;p&gt;把輸出之名命名為division=add.add(6,2)    &lt;/p&gt;
&lt;p&gt;第一個為mul.py檔名,第二個為mul名稱&lt;/p&gt;
&lt;p&gt;輸出之公式ab為6和2
 &lt;/pre&gt;&lt;/p&gt;
&lt;h1&gt;網頁測試減法&lt;/h1&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫四連桿 trace point 路徑--&gt;

&lt;!--&lt;canvas id="w10" width="800" height="600"&gt;&lt;/canvas&gt;--&gt;

&lt;div id="container1" width="600" height="400"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import math
container = doc['container1']
degree = math.pi/180
def button2(event):
    a = input("give me a")
    b = input("give me b")
    container &lt;= str(float(a)-float(b))
doc["button2"].bind("click", button2)

&lt;/script&gt;

&lt;p&gt;&lt;button id="button2"&gt;按下取 a b 值&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;subtraction.py(減法)
&lt;pre class="brush:python"&gt;
 定義: div這個檔為a和b兩個變數&lt;/p&gt;
&lt;p&gt;輸出公式為 a-b&lt;/p&gt;
&lt;p&gt;導入sys&lt;/p&gt;
&lt;p&gt;指出資料夾路徑&lt;/p&gt;
&lt;p&gt;輸出mul.pty這個檔&lt;/p&gt;
&lt;p&gt;把輸出之名命名為subtraction=add.add(6,2)    &lt;/p&gt;
&lt;p&gt;第一個為add.py檔名,第二個為sub名稱&lt;/p&gt;
&lt;p&gt;輸出之公式ab為6和2
 &lt;/pre&gt;&lt;/p&gt;</summary><category term="w10"></category></entry><entry><title>20170420W9</title><link href="./40423140w9.html" rel="alternate"></link><updated>2017-04-20T00:00:00+08:00</updated><author><name>40423140</name></author><id>tag:,2017-04-20:./40423140w9.html</id><summary type="html">&lt;p&gt;1.Fossil Server 實習查驗&lt;/p&gt;
&lt;p&gt;2.四連桿機構協同 Trace Point 查驗&lt;/p&gt;
&lt;p&gt;3.Fourbar Walker OnShape 零件協同繪圖與組立查驗&lt;/p&gt;
&lt;p&gt;4.分組協同零件展示&lt;/p&gt;


&lt;h2&gt;(一) Fossil Server 實習查驗&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://mde2a2.kmol.info/midterm/ag4/index"&gt;ag4期中考報告 fossil &lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;(二) 四連桿機構協同 Trace Point 查驗&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://40423106.github.io/2016fallcadp_hw/blog/qi-zhong-bao-gao.html"&gt;40423106_四連桿機構協同 Trace Point 查驗&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://40423107.github.io/2016fallcadp_hw/blog/40423107W9.html"&gt;40423107_四連桿機構協同 Trace Point 查驗&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://40423108.github.io/2017springcd_hw/blog/xie-tong-chan-pin-she-ji-shi-xi-qi-zhong-fourbar-walker-onshape-ling-jian-xie-tong-hui-tu-yu-zu-li-cha-yan.html"&gt;40423108_四連桿機構協同 Trace Point 查驗&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://40423125.github.io/2016fallcadp_hw/blog/40423125_si-lian-gan-ji-gou-xie-tong-trace-point-cha-yan.html"&gt;40423125_四連桿機構協同 Trace Point 查驗&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://40423139.github.io/2016fallcadp_hw/blog/40423139_si-lian-gan-ji-gou-xie-tong-trace-point-cha-yan.html"&gt;40423139_四連桿機構協同 Trace Point 查驗&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://40423140.github.io/2016fallcadp_hw/blog/40423140_si-lian-gan-ji-gou-xie-tong-trace-point-cha-yan.html"&gt;40423140_四連桿機構協同 Trace Point 查驗&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;(三) Fourbar Walker OnShape 零件協同繪圖與組立查驗&lt;/h2&gt;
&lt;p&gt;利用SolveSpace畫Fourbar Walker影片&lt;/p&gt;
&lt;div style="position:relative;height:0;padding-bottom:56.25%"&gt;&lt;iframe src="https://www.youtube.com/embed/5nohBEM7uA8?ecver=2" width="640" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;利用OnShape組立Fourbar Walker影片&lt;/p&gt;
&lt;div style="position:relative;height:0;padding-bottom:56.25%"&gt;&lt;iframe src="https://www.youtube.com/embed/UgkV_cSpS5Y?ecver=2" width="640" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;h2&gt;(四) 分組協同零件展示&lt;/h2&gt;
&lt;p&gt;&lt;link href="./../work/madeleine/src/css/Madeleine.css" rel="stylesheet"&gt;
&lt;script src="./../work/madeleine/src/stats.js"&gt;&lt;/script&gt;
&lt;script src="./../work/madeleine/src/detector.js"&gt;&lt;/script&gt;
&lt;script src="./../work/madeleine/src/three.min.js"&gt;&lt;/script&gt;
&lt;script src="./../work/madeleine/src/Madeleine.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;div id="target" class="madeleine"&gt;&lt;/div&gt;

&lt;script&gt;
window.onload = function(){
    var madeleine = new Madeleine({
      target: 'target', // target div id
      data: './../data/40423140.stl', // data path
      path: './../work/madeleine/src/' // path to source directory from current html file
    });
}; 
&lt;/script&gt;

&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r68/three.min.js"
&gt;&lt;/script&gt;

&lt;script src="https://rawgit.com/mrdoob/three.js/master/examples/js/controls/TrackballControls.js"
&gt;&lt;/script&gt;

&lt;script src="./../w9/loader.js"&gt;&lt;/script&gt;

&lt;script src="./../w9/stl.js"&gt;&lt;/script&gt;

&lt;div&gt;
select stl file: &lt;input type="file" id="file" /&gt; or drop stl file
&lt;/div&gt;

&lt;div id="view"&gt;&lt;/div&gt;</summary><category term="w9"></category></entry><entry><title>20170405W6</title><link href="./40423140w6.html" rel="alternate"></link><updated>2017-04-05T00:00:00+08:00</updated><author><name>40423140</name></author><id>tag:,2017-04-05:./40423140w6.html</id><summary type="html">&lt;h2&gt;四連桿機構轉入V-REP進行運動模擬&lt;/h2&gt;


&lt;h2&gt;零件繪製影片&lt;/h2&gt;
&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/211640425" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href="https://vimeo.com/211640425"&gt;w6 fourbar part1&lt;/a&gt; from &lt;a href="https://vimeo.com/user46449861"&gt;40423140&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/211640442" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/211640442"&gt;w6 fourbar part2&lt;/a&gt; from &lt;a href="https://vimeo.com/user46449861"&gt;40423140&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;四連桿組立影片&lt;/h2&gt;
&lt;iframe src="https://player.vimeo.com/video/211640371" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/211640371"&gt;fourbar assembly&lt;/a&gt; from &lt;a href="https://vimeo.com/user46449861"&gt;40423140&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;八連桿機構轉入V-REP進行運動模擬&lt;/h2&gt;
&lt;div style="position:relative;height:0;padding-bottom:56.25%"&gt;&lt;iframe src="https://www.youtube.com/embed/PCETbBMYiHY?ecver=2" width="640" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;iframe src="https://player.vimeo.com/video/213239885" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/213239885"&gt;w6 eightbar parts 2&lt;/a&gt; from &lt;a href="https://vimeo.com/user46449861"&gt;40423140&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;八連桿組立影片&lt;/h2&gt;
&lt;p&gt;&lt;div style="position:relative;height:0;padding-bottom:56.25%"&gt;&lt;iframe src="https://www.youtube.com/embed/tKCg8uvBp9A?ecver=2" width="640" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/p&gt;</summary><category term="w6"></category></entry><entry><title>20170330W5</title><link href="./40423140w5.html" rel="alternate"></link><updated>2017-03-30T00:00:00+08:00</updated><author><name>40423140</name></author><id>tag:,2017-03-30:./40423140w5.html</id><summary type="html">&lt;h2&gt;單連桿機構轉入V-REP進行運動模擬&lt;/h2&gt;


&lt;div style="position:relative;height:0;padding-bottom:56.25%"&gt;&lt;iframe src="https://www.youtube.com/embed/TvU7TR7WrKI?ecver=2" width="640" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;</summary><category term="w5"></category></entry><entry><title>20170322W4</title><link href="./40423140w4.html" rel="alternate"></link><updated>2017-03-22T00:00:00+08:00</updated><author><name>40423140</name></author><id>tag:,2017-03-22:./40423140w4.html</id><summary type="html">&lt;h2&gt;onelink&lt;/h2&gt;


&lt;iframe src="https://player.vimeo.com/video/209552330" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/209552330"&gt;one link&lt;/a&gt; from &lt;a href="https://vimeo.com/user46449861"&gt;40423140&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;G4&lt;/h2&gt;
&lt;h2&gt;曾繼緯 史育澤 黃子晏 共同完成此翻譯影片&lt;/h2&gt;
&lt;iframe src="https://player.vimeo.com/video/209207407" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/209207407"&gt;Produce&lt;/a&gt; from &lt;a href="https://vimeo.com/user57418042"&gt;曾繼緯&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;翻譯： 
The core of HyperMesh has always been about meshing and geometry cleanup， HyperMesh的核心是關於網路劃分和幾何清理，&lt;/p&gt;
&lt;p&gt;and generating a really good solver deck. 並且產生一個非常好的解算平台&lt;/p&gt;
&lt;p&gt;So we've continued to stay really focused on geometry ， 所以我們持續專注於幾何&lt;/p&gt;
&lt;p&gt;generation and clean up， 生成和清理&lt;/p&gt;
&lt;p&gt;mesh generation to improve the quality of the mesh， 藉由網格生成以提高網格質量&lt;/p&gt;
&lt;p&gt;the flow of the mesh. 網格的流動&lt;/p&gt;
&lt;p&gt;And within Altair， 在Altair裡&lt;/p&gt;
&lt;p&gt;our own solver and modeling visualization teams work very closely together 我們的解算器和建模可以清楚的看見團隊緊密合作&lt;/p&gt;
&lt;p&gt;to make sure we're supporting all the latest enhancements to the Altair solvers 以確保我們增強所有最新的Altair解算器&lt;/p&gt;
&lt;p&gt;and the modeling visualization side of things. 並且可以清楚看見物體的模組&lt;/p&gt;
&lt;p&gt;Simlab is always about automate， automate，automated. Simlab是關於自動化，自動化，自動化.&lt;/p&gt;
&lt;p&gt;We continue to improve the user experience. 我們持續改善用戶體驗&lt;/p&gt;
&lt;p&gt;We've added the mesh fading approach in the graphics that we use in HyperMesh now. 我們在HyperMesh中使用的圖形中添加了網格衰減方法。&lt;/p&gt;
&lt;p&gt;We've added a new measurement tool, 我們添加了一個新的測量工具，&lt;/p&gt;
&lt;p&gt;we've included JT and Catia direct readers. 我們包括JT和Catia的讀者&lt;/p&gt;
&lt;p&gt;We have new macro tools for creating bearings and welds. 我們新的巨集工具用於創建軸承與焊接&lt;/p&gt;
&lt;p&gt;We put a lot of effort into the CFD pre-processing in simLab now as well. 我們在simLab中也投入了大量的資源進行CFD的預先處理。&lt;/p&gt;
&lt;p&gt;And we support the new nanoFluidx SPH fluid code from Altair. 以及我們的支援來自於Altair新的nanoFluidX SPH流體代碼。&lt;/p&gt;
&lt;p&gt;And we now have support for FEKO inside of SimLab. 而現在我們已經在SimLab中支援FEKO。&lt;/p&gt;
&lt;p&gt;And very exciting,we'ce added a Python intreface to SimLab as well. 非常令人振奮的是，我們還為SimLab添加了一個Python介面。&lt;/p&gt;
&lt;p&gt;There's a lot of work going on in the crash domain side of HyperMesh right now. 現在在HyperMesh的損毀處有很多修復工作正在進行。&lt;/p&gt;
&lt;p&gt;So we've kind of gone back to the drawing board on creating a new dummy positioner that has a new kinematic solver nuilt into it, 所以我們回到繪圖板上創建一個新的虛擬定位器，其中內置了一個新的運動解碼器，&lt;/p&gt;
&lt;p&gt;and new graphical manipulators that make position a dummy in the vehicle much simpler, 以及新的圖形操縱器，使位置在虛擬的傳送中變得更簡單，&lt;/p&gt;
&lt;p&gt;and actually kind of fun. 實際上會有趣。&lt;/p&gt;
&lt;p&gt;We've also employed that same kinematic solver in a seat positioning tool. 我們還在位置定位工具中使用了相同的運動解碼器。&lt;/p&gt;
&lt;p&gt;So now it will simulate all the mechanisms that actually articulate the seat in the vehicle 所以現在它將模擬所有的實際機構在傳送位置的機制&lt;/p&gt;
&lt;p&gt;so you can get that into the correct position as well. 所以你可以得到正確的位置。&lt;/p&gt;
&lt;p&gt;we've had some great enhancements to HyperView. 我們對HyperView進行了一些重大的改進。&lt;/p&gt;
&lt;p&gt;you can directly interact with the legends now to control what's on the screen in terms the contours of the different data types. 您可以直接與圖例進行互動，以便根據不同數據類型的週線控制屏幕上的內容。&lt;/p&gt;
&lt;p&gt;where you can have multiple results 你可以有多個結果&lt;/p&gt;
&lt;p&gt;files associated with a model file so 文件與模組文件相關聯等&lt;/p&gt;
&lt;p&gt;that makes it really easy to bring in 所以使它真的很容易帶來&lt;/p&gt;
&lt;p&gt;results between different runs into the 結果之間的不同運行&lt;/p&gt;
&lt;p&gt;same model space 相同模組空間&lt;/p&gt;
&lt;p&gt;and compare results HyperGraph is 並比較HyperGraph的結果&lt;/p&gt;
&lt;p&gt;really the best plotting system for CAE results. 真的是CAE結果的最佳繪圖系統。&lt;/p&gt;
&lt;p&gt;it's essentially a data 它本質上是一個數據&lt;/p&gt;
&lt;p&gt;miner that lets you go through all the 讓你經歷所有&lt;/p&gt;
&lt;p&gt;results files, generate large reports with 結果文件，生成大型報告和&lt;/p&gt;
&lt;p&gt;many points, within the curves. And once 許多點，在曲線內。 在一次&lt;/p&gt;
&lt;p&gt;you're established a 你成立了一個&lt;/p&gt;
&lt;p&gt;reports that you're looking at, you 你在看報告，你&lt;/p&gt;
&lt;p&gt;can make global changes across the 可以使全球變化跨越這&lt;/p&gt;
&lt;p&gt;entire report so it's a great automation 整個報告，所以它是一個偉大的自動化&lt;/p&gt;
&lt;p&gt;Tool for post-processing 工具後處理&lt;/p&gt;
&lt;h2&gt;邱弘丞 江心平 王翔佑 共同完成此翻譯影片&lt;/h2&gt;
&lt;div style="position:relative;height:0;padding-bottom:56.25%"&gt;&lt;iframe src="https://www.youtube.com/embed/2r5OHm7_FGc?ecver=2" width="640" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;翻譯逐字稿 The 2017 HyperWorks release has a lot of enhancements to the modeling and assembly capabilities to the software.&lt;/p&gt;
&lt;p&gt;HyperWorks 2017版對軟體的建模和組裝功能進行了大量增強&lt;/p&gt;
&lt;p&gt;So we put in a new parts browser with a built-in part library.&lt;/p&gt;
&lt;p&gt;所以我們把新的零件瀏覽器放進內置零件庫&lt;/p&gt;
&lt;p&gt;The part library is a great tool for storing and loading work in progress.&lt;/p&gt;
&lt;p&gt;零件庫是很好的工具用於存儲和加載工作。&lt;/p&gt;
&lt;p&gt;So you can store a catalog of all the common parts that a workgroup needs to use,&lt;/p&gt;
&lt;p&gt;因此你可以存儲工作所需要使用的共用的零件，&lt;/p&gt;
&lt;p&gt;so they can download their models from their PLM system&lt;/p&gt;
&lt;p&gt;所以他們可以從他們的PLM系統下載他們的模型&lt;/p&gt;
&lt;p&gt;Dand store them locally in a parts library for a work in progress.&lt;/p&gt;
&lt;p&gt;並將它們存儲在本地的零件庫中為進行中的工作所用。&lt;/p&gt;
&lt;p&gt;And it keeps revision control on them so they can back up to the different versions&lt;/p&gt;
&lt;p&gt;它可以保有每次的修訂，所以他可以備份每個不同的版本 And they can also build different configurations now of their models.&lt;/p&gt;
&lt;p&gt;現在他們也可以為他們的模型建立不同的配置。&lt;/p&gt;
&lt;p&gt;in the configurations modeler now they can import parts from part&lt;/p&gt;
&lt;p&gt;現在他們可以在設定配置時從零件庫導入零件&lt;/p&gt;
&lt;p&gt;and then group them into what we call part sets,&lt;/p&gt;
&lt;p&gt;然後將它們組成我們所謂的部分集&lt;/p&gt;
&lt;p&gt;which are convenient groupings of parts.&lt;/p&gt;
&lt;p&gt;以便於我們分組部件。&lt;/p&gt;
&lt;p&gt;And then they can drag those parts together into assemblies,&lt;/p&gt;
&lt;p&gt;然後他們可以利用這些零件進行組裝，&lt;/p&gt;
&lt;p&gt;,and configure them for different load cases or different variations of their models.&lt;/p&gt;
&lt;p&gt;並針對不同負載情況或不同的模型配置它們。&lt;/p&gt;
&lt;p&gt;The other feature of having parts in the software is we do part instancing now, too.&lt;/p&gt;
&lt;p&gt;軟體的另一個特徵是，現在我們也做了部件的實體化。&lt;/p&gt;
&lt;p&gt;So if you load in a part that has multiple instances through the model, we support that.&lt;/p&gt;
&lt;p&gt;因此，如果您要加載多個實體的零件到模型，我們有支援。&lt;/p&gt;
&lt;p&gt;We don't have to create multiple copies of it.&lt;/p&gt;
&lt;p&gt;我們不需要創建多個零件副本。&lt;/p&gt;
&lt;p&gt;We can actually do the instancing,which is very memory efficient.&lt;/p&gt;
&lt;p&gt;我們可以的有效利用內存。&lt;/p&gt;
&lt;p&gt;Also in the model building assembly tool set is enhanced ID management as well.&lt;/p&gt;
&lt;p&gt;也在模型建立裝配,工具集以及增强ID管理。&lt;/p&gt;
&lt;p&gt;So not only can we assign IDs based on different rules that you define in the software, but you can import ID systems&lt;/p&gt;
&lt;p&gt;因此我們不僅可以根據你軟件中定義的規則分配不同ID，也可以導入ID系統&lt;/p&gt;
&lt;p&gt;from spreadsheets, XML files, database, billboard and so forth&lt;/p&gt;
&lt;p&gt;從試算表，XML檔案，資料庫，看板等等&lt;/p&gt;
&lt;p&gt;that are then used when it does the renumbering or the assembly of the model.&lt;/p&gt;
&lt;p&gt;然後在對模型進行重新編號或裝配時使用。&lt;/p&gt;
&lt;p&gt;it has to resolve part collisions.&lt;/p&gt;
&lt;p&gt;它必须解决部分衝突。&lt;/p&gt;
&lt;p&gt;Really important of doing model assembly is connecting all those parts together.&lt;/p&gt;
&lt;p&gt;做模型裝配真正重要的是把這些所有部分連接在一起。&lt;/p&gt;
&lt;p&gt;Connectors are really vital to the overall assembly process.&lt;/p&gt;
&lt;p&gt;連接器對整個裝配過程至關重要。&lt;/p&gt;
&lt;p&gt;The quality of the connector that you create really determine the outcome of the quality of the overall assembled model as well.&lt;/p&gt;
&lt;p&gt;D接合處的品質決定了整體組裝模型的品質。&lt;/p&gt;
&lt;p&gt;So for us to get a good high fidelity solution, you have to have a really good connection generation as well.&lt;/p&gt;
&lt;p&gt;所以為了讓我們得到一個良好的解析度，必須有更密集的連接點。&lt;/p&gt;</summary><category term="w4"></category></entry><entry><title>20170314W3</title><link href="./40423140W3.html" rel="alternate"></link><updated>2017-03-14T00:00:00+08:00</updated><author><name>40423140</name></author><id>tag:,2017-03-14:./40423140W3.html</id><summary type="html">&lt;h2&gt;onshape四連桿機構&lt;/h2&gt;


&lt;iframe src="https://player.vimeo.com/video/209551046" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/209551046"&gt;on shape 4連桿機構&lt;/a&gt; from &lt;a href="https://vimeo.com/user46449861"&gt;40423140&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;onshape四連桿機構組合圖&lt;/h2&gt;
&lt;iframe src="https://player.vimeo.com/video/209551153" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/209551153"&gt;4連桿組合圖&lt;/a&gt; from &lt;a href="https://vimeo.com/user46449861"&gt;40423140&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;G4&lt;/h2&gt;
&lt;h2&gt;曾繼緯 史育澤 黃子晏 共同完成此翻譯影片&lt;/h2&gt;
&lt;iframe src="https://player.vimeo.com/video/209207407" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/209207407"&gt;Produce&lt;/a&gt; from &lt;a href="https://vimeo.com/user57418042"&gt;曾繼緯&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;翻譯：
The core of HyperMesh has always been about meshing and geometry cleanup， HyperMesh的核心是關於網路劃分和幾何清理，&lt;/p&gt;
&lt;p&gt;and generating a really good solver deck. 並且產生一個非常好的解算平台&lt;/p&gt;
&lt;p&gt;So we've continued to stay really focused on geometry ， 所以我們持續專注於幾何&lt;/p&gt;
&lt;p&gt;generation and clean up， 生成和清理&lt;/p&gt;
&lt;p&gt;mesh generation to improve the quality of the mesh， 藉由網格生成以提高網格質量&lt;/p&gt;
&lt;p&gt;the flow of the mesh. 網格的流動&lt;/p&gt;
&lt;p&gt;And within Altair， 在Altair裡&lt;/p&gt;
&lt;p&gt;our own solver and modeling visualization teams work very closely together 我們的解算器和建模可以清楚的看見團隊緊密合作&lt;/p&gt;
&lt;p&gt;to make sure we're supporting all the latest enhancements to the Altair solvers 以確保我們增強所有最新的Altair解算器&lt;/p&gt;
&lt;p&gt;and the modeling visualization side of things. 並且可以清楚看見物體的模組&lt;/p&gt;
&lt;p&gt;Simlab is always about automate， automate，automated. Simlab是關於自動化，自動化，自動化.&lt;/p&gt;
&lt;p&gt;We continue to improve the user experience. 我們持續改善用戶體驗&lt;/p&gt;
&lt;p&gt;We've added the mesh fading approach in the graphics that we use in HyperMesh now. 我們在HyperMesh中使用的圖形中添加了網格衰減方法。&lt;/p&gt;
&lt;p&gt;We've added a new measurement tool, 我們添加了一個新的測量工具，&lt;/p&gt;
&lt;p&gt;we've included JT and Catia direct readers. 我們包括JT和Catia的讀者&lt;/p&gt;
&lt;p&gt;We have new macro tools for creating bearings and welds. 我們新的巨集工具用於創建軸承與焊接&lt;/p&gt;
&lt;p&gt;We put a lot of effort into the CFD pre-processing in simLab now as well. 我們在simLab中也投入了大量的資源進行CFD的預先處理。&lt;/p&gt;
&lt;p&gt;And we support the new nanoFluidx SPH fluid code from Altair. 以及我們的支援來自於Altair新的nanoFluidX SPH流體代碼。&lt;/p&gt;
&lt;p&gt;And we now have support for FEKO inside of SimLab. 而現在我們已經在SimLab中支援FEKO。&lt;/p&gt;
&lt;p&gt;And very exciting,we'ce added a Python intreface to SimLab as well. 非常令人振奮的是，我們還為SimLab添加了一個Python介面。&lt;/p&gt;
&lt;p&gt;There's a lot of work going on in the crash domain side of HyperMesh right now. 現在在HyperMesh的損毀處有很多修復工作正在進行。&lt;/p&gt;
&lt;p&gt;So we've kind of gone back to the drawing board on creating a new dummy positioner that has a new kinematic solver nuilt into it, 所以我們回到繪圖板上創建一個新的虛擬定位器，其中內置了一個新的運動解碼器，&lt;/p&gt;
&lt;p&gt;and new graphical manipulators that make position a dummy in the vehicle much simpler, 以及新的圖形操縱器，使位置在虛擬的傳送中變得更簡單，&lt;/p&gt;
&lt;p&gt;and actually kind of fun. 實際上會有趣。&lt;/p&gt;
&lt;p&gt;We've also employed that same kinematic solver in a seat positioning tool. 我們還在位置定位工具中使用了相同的運動解碼器。&lt;/p&gt;
&lt;p&gt;So now it will simulate all the mechanisms that actually articulate the seat in the vehicle 所以現在它將模擬所有的實際機構在傳送位置的機制&lt;/p&gt;
&lt;p&gt;so you can get that into the correct position as well. 所以你可以得到正確的位置。&lt;/p&gt;
&lt;p&gt;we've had some great enhancements to HyperView. 我們對HyperView進行了一些重大的改進。&lt;/p&gt;
&lt;p&gt;you can directly interact with the legends now to control what's on the screen in terms the contours of the different data types. 您可以直接與圖例進行互動，以便根據不同數據類型的週線控制屏幕上的內容。&lt;/p&gt;
&lt;p&gt;where you can have multiple results 你可以有多個結果&lt;/p&gt;
&lt;p&gt;files associated with a model file so 文件與模組文件相關聯等&lt;/p&gt;
&lt;p&gt;that makes it really easy to bring in 所以使它真的很容易帶來&lt;/p&gt;
&lt;p&gt;results between different runs into the 結果之間的不同運行&lt;/p&gt;
&lt;p&gt;same model space 相同模組空間&lt;/p&gt;
&lt;p&gt;and compare results HyperGraph is 並比較HyperGraph的結果&lt;/p&gt;
&lt;p&gt;really the best plotting system for CAE results. 真的是CAE結果的最佳繪圖系統。&lt;/p&gt;
&lt;p&gt;it's essentially a data 它本質上是一個數據&lt;/p&gt;
&lt;p&gt;miner that lets you go through all the 讓你經歷所有&lt;/p&gt;
&lt;p&gt;results files, generate large reports with 結果文件，生成大型報告和&lt;/p&gt;
&lt;p&gt;many points, within the curves. And once 許多點，在曲線內。 在一次&lt;/p&gt;
&lt;p&gt;you're established a 你成立了一個&lt;/p&gt;
&lt;p&gt;reports that you're looking at, you 你在看報告，你&lt;/p&gt;
&lt;p&gt;can make global changes across the 可以使全球變化跨越這&lt;/p&gt;
&lt;p&gt;entire report so it's a great automation 整個報告，所以它是一個偉大的自動化&lt;/p&gt;
&lt;p&gt;Tool for post-processing 工具後處理&lt;/p&gt;
&lt;h2&gt;邱弘丞 江心平 王翔佑 共同完成此翻譯影片&lt;/h2&gt;
&lt;div style="position:relative;height:0;padding-bottom:56.25%"&gt;&lt;iframe src="https://www.youtube.com/embed/2r5OHm7_FGc?ecver=2" width="640" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;翻譯逐字稿 The 2017 HyperWorks release has a lot of enhancements to the modeling and assembly capabilities to the software.&lt;/p&gt;
&lt;p&gt;HyperWorks 2017版對軟體的建模和組裝功能進行了大量增強&lt;/p&gt;
&lt;p&gt;So we put in a new parts browser with a built-in part library.&lt;/p&gt;
&lt;p&gt;所以我們把新的零件瀏覽器放進內置零件庫&lt;/p&gt;
&lt;p&gt;The part library is a great tool for storing and loading work in progress.&lt;/p&gt;
&lt;p&gt;零件庫是很好的工具用於存儲和加載工作。&lt;/p&gt;
&lt;p&gt;So you can store a catalog of all the common parts that a workgroup needs to use,&lt;/p&gt;
&lt;p&gt;因此你可以存儲工作所需要使用的共用的零件，&lt;/p&gt;
&lt;p&gt;so they can download their models from their PLM system&lt;/p&gt;
&lt;p&gt;所以他們可以從他們的PLM系統下載他們的模型&lt;/p&gt;
&lt;p&gt;Dand store them locally in a parts library for a work in progress.&lt;/p&gt;
&lt;p&gt;並將它們存儲在本地的零件庫中為進行中的工作所用。&lt;/p&gt;
&lt;p&gt;And it keeps revision control on them so they can back up to the different versions&lt;/p&gt;
&lt;p&gt;它可以保有每次的修訂，所以他可以備份每個不同的版本 And they can also build different configurations now of their models.&lt;/p&gt;
&lt;p&gt;現在他們也可以為他們的模型建立不同的配置。&lt;/p&gt;
&lt;p&gt;in the configurations modeler now they can import parts from part&lt;/p&gt;
&lt;p&gt;現在他們可以在設定配置時從零件庫導入零件&lt;/p&gt;
&lt;p&gt;and then group them into what we call part sets,&lt;/p&gt;
&lt;p&gt;然後將它們組成我們所謂的部分集&lt;/p&gt;
&lt;p&gt;which are convenient groupings of parts.&lt;/p&gt;
&lt;p&gt;以便於我們分組部件。&lt;/p&gt;
&lt;p&gt;And then they can drag those parts together into assemblies,&lt;/p&gt;
&lt;p&gt;然後他們可以利用這些零件進行組裝，&lt;/p&gt;
&lt;p&gt;,and configure them for different load cases or different variations of their models.&lt;/p&gt;
&lt;p&gt;並針對不同負載情況或不同的模型配置它們。&lt;/p&gt;
&lt;p&gt;The other feature of having parts in the software is we do part instancing now, too.&lt;/p&gt;
&lt;p&gt;軟體的另一個特徵是，現在我們也做了部件的實體化。&lt;/p&gt;
&lt;p&gt;So if you load in a part that has multiple instances through the model, we support that.&lt;/p&gt;
&lt;p&gt;因此，如果您要加載多個實體的零件到模型，我們有支援。&lt;/p&gt;
&lt;p&gt;We don't have to create multiple copies of it.&lt;/p&gt;
&lt;p&gt;我們不需要創建多個零件副本。&lt;/p&gt;
&lt;p&gt;We can actually do the instancing,which is very memory efficient.&lt;/p&gt;
&lt;p&gt;我們可以的有效利用內存。&lt;/p&gt;
&lt;p&gt;Also in the model building assembly tool set is enhanced ID management as well.&lt;/p&gt;
&lt;p&gt;也在模型建立裝配,工具集以及增强ID管理。&lt;/p&gt;
&lt;p&gt;So not only can we assign IDs based on different rules that you define in the software, but you can import ID systems&lt;/p&gt;
&lt;p&gt;因此我們不僅可以根據你軟件中定義的規則分配不同ID，也可以導入ID系統&lt;/p&gt;
&lt;p&gt;from spreadsheets, XML files, database, billboard and so forth&lt;/p&gt;
&lt;p&gt;從試算表，XML檔案，資料庫，看板等等&lt;/p&gt;
&lt;p&gt;that are then used when it does the renumbering or the assembly of the model.&lt;/p&gt;
&lt;p&gt;然後在對模型進行重新編號或裝配時使用。&lt;/p&gt;
&lt;p&gt;it has to resolve part collisions.&lt;/p&gt;
&lt;p&gt;它必须解决部分衝突。&lt;/p&gt;
&lt;p&gt;Really important of doing model assembly is connecting all those parts together.&lt;/p&gt;
&lt;p&gt;做模型裝配真正重要的是把這些所有部分連接在一起。&lt;/p&gt;
&lt;p&gt;Connectors are really vital to the overall assembly process.&lt;/p&gt;
&lt;p&gt;連接器對整個裝配過程至關重要。&lt;/p&gt;
&lt;p&gt;The quality of the connector that you create really determine the outcome of the quality of the overall assembled model as well.&lt;/p&gt;
&lt;p&gt;D接合處的品質決定了整體組裝模型的品質。&lt;/p&gt;
&lt;p&gt;So for us to get a good high fidelity solution, you have to have a really good connection generation as well.&lt;/p&gt;
&lt;p&gt;所以為了讓我們得到一個良好的解析度，必須有更密集的連接點。&lt;/p&gt;</summary><category term="w3"></category></entry><entry><title>20170302W2</title><link href="./40423140w2.html" rel="alternate"></link><updated>2017-03-02T00:00:00+08:00</updated><author><name>40423140</name></author><id>tag:,2017-03-02:./40423140w2.html</id><summary type="html">&lt;h2&gt;四連桿機構&lt;/h2&gt;


&lt;iframe src="https://player.vimeo.com/video/207446283" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/207446283"&gt;3.8 四連桿機構&lt;/a&gt; from &lt;a href="https://vimeo.com/user46449861"&gt;40423140&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;div style="position:relative;height:0;padding-bottom:56.25%"&gt;&lt;iframe src="https://www.youtube.com/embed/6gfwbVn0xSA?ecver=2" width="640" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;</summary><category term="w2"></category></entry></feed>